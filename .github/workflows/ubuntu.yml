name: 检查版本并上传至RELEASE

on:
  schedule:
    - cron: "0 0 * * 0" # 每周日的午夜RUN一次
  workflow_dispatch: # 手动触发事件

jobs:
  check_version:
    runs-on: ubuntu-latest
    steps:
      - name: CHECKOUT CODE
        uses: actions/checkout@v3

      - name: GET CURRENT VERSION FROM CACHE
        id: cache_version
        uses: actions/cache@v3
        with:
          path: .version
          key: ${{ runner.OS }}-version

      - name: GET CURRENT VERSION
        run: |
          curl -sL https://qn.whyour.cn/version.yaml -o version.yaml
          current_version=$(cat version.yaml | grep version | cut -d ':' -f 2 | tr -d ' "')
          echo "current_version=$current_version" >>$GITHUB_ENV

      - name: COMPARE VERSIONS
        if: steps.cache_version.outputs.cache-hit != 'true' || steps.cache_version.outputs.cache-hit == 'true' && env.current_version != steps.cache_version.outputs.version
        run: |
          echo "版本不同或缓存未命中。继续执行RELEASE。"

      - name: SETTING DOCKER BUILDX
        if: steps.cache_version.outputs.cache-hit != 'true' || steps.cache_version.outputs.cache-hit == 'true' && env.current_version != steps.cache_version.outputs.version
        uses: docker/setup-buildx-action@v2

      - name: PULL DOCKER IMAGE
        run: |
          docker pull whyour/qinglong:debian
          docker pull whyour/qinglong:latest

      - name: RUN DOCKER CONTAINER
        run: |
          docker run --name qinglong-debian -dit -p 5700:5700 whyour/qinglong:debian
          docker run --name qinglong-latest -dit -p 5701:5700 whyour/qinglong:latest

      - name: CHECK API STATUS
        run: |
          while ! curl -s -w "%{http_code}" http://127.0.0.1:5700/api/public/health | grep -q 200; do sleep 1; done
          while ! curl -s -w "%{http_code}" http://127.0.0.1:5701/api/public/health | grep -q 200; do sleep 1; done

      - name: EXECUTE MULTIPLE COMMANDS IN DEBIAN CONTAINER
        run: |
          docker exec qinglong-debian bash -c "pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple"
          docker exec qinglong-debian bash -c "printf 'deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye main contrib non-free\n' >/etc/apt/sources.list"
          docker exec qinglong-debian bash -c "printf 'deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-updates main contrib non-free\n' >>/etc/apt/sources.list"
          docker exec qinglong-debian bash -c "printf 'deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-backports main contrib non-free\n' >>/etc/apt/sources.list"

      - name: EXECUTE MULTIPLE COMMANDS IN LATEST CONTAINER
        run: |
          docker exec qinglong-latest bash -c "pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple"
          docker exec qinglong-latest bash -c "sed -i 's/dl-cdn.alpinelinux.org/mirrors.tuna.tsinghua.edu.cn/g' /etc/apk/repositories"

      - name: STOP CONTAINER
        run: |
          docker stop qinglong-debian
          docker stop qinglong-latest

      - name: COMMIT DOCKER CONTAINER
        run: |
          docker commit qinglong-debian qinglong-debian
          docker commit qinglong-latest qinglong-latest

      - name: SAVE DOCKER IMAGE
        run: |
          docker export -o qinglong-debian.tar qinglong-debian
          docker export -o qinglong-latest.tar qinglong-latest

      - name: CREATE RELEASE
        if: steps.cache_version.outputs.cache-hit != 'true' || steps.cache_version.outputs.cache-hit == 'true' && env.current_version != steps.cache_version.outputs.version
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.current_version }}
          release_name: RELEASE ${{ env.current_version }}
          draft: false
          prerelease: false

      - name: UPLOAD DEBIAN RELEASE ASSET
        if: steps.cache_version.outputs.cache-hit != 'true' || steps.cache_version.outputs.cache-hit == 'true' && env.current_version != steps.cache_version.outputs.version
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./qinglong-debian.tar
          asset_name: qinglong-debian.tar
          asset_content_type: application/x-tar

      - name: UPLOAD LATEST RELEASE ASSET
        if: steps.cache_version.outputs.cache-hit != 'true' || steps.cache_version.outputs.cache-hit == 'true' && env.current_version != steps.cache_version.outputs.version
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./qinglong-latest.tar
          asset_name: qinglong-latest.tar
          asset_content_type: application/x-tar

      - name: SAVE VERSION IN CACHE
        if: steps.cache_version.outputs.cache-hit != 'true' || steps.cache_version.outputs.cache-hit == 'true' && env.current_version != steps.cache_version.outputs.version
        uses: actions/cache@v3
        with:
          path: .version
          key: ${{ runner.OS }}-version
          restore-keys: ${{ runner.OS }}-version

      - name: WRITE VERSION TO FILE
        if: steps.cache_version.outputs.cache-hit != 'true' || steps.cache_version.outputs.cache-hit == 'true' && env.current_version != steps.cache_version.outputs.version
        run: echo ${{ env.current_version }} > .version
