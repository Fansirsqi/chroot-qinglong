name: Export Docker Services
on:
  schedule:
    - cron: 0 0 * * 0
  workflow_dispatch:

jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Get Cache Version From Cache
        id: cache_version
        uses: actions/cache@v4
        with:
          path: .version
          key: CACHE-VERSION

      - name: Check If Version File Exists
        id: check_version_file
        run: |
          if [ -f ".version" ]; then
            CACHED_VERSION=$(cat .version)
            echo "CACHED_VERSION=$CACHED_VERSION" >> $GITHUB_OUTPUT
            echo "Version file found in cache. $CACHED_VERSION"
            echo "CACHED_VERSION_FILE_FOUND=true" >> $GITHUB_OUTPUT
          else
            echo "Version file not found in cache."
            echo "CACHED_VERSION_FILE_FOUND=false" >> $GITHUB_OUTPUT
          fi

      - name: Get latest release
        id: latest_release
        run: |
          LATEST_RELEASE=$(curl --header "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" --header "Accept: application/vnd.github.v3+json" "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r '.tag_name')
          echo "LATEST_RELEASE=$LATEST_RELEASE" >>$GITHUB_OUTPUT
          echo $LATEST_RELEASE > .version

      - name: Get Online Version
        id: get_current_version
        run: |
          current_timestamp=$(date +%s%N | cut -b1-13)
          echo "当前时间戳 $current_timestamp"
          curl -sL "https://qn.whyour.cn/version.yaml?t=$current_timestamp" -o latest.yaml
          
          ONLINE_VERSION=$(cat latest.yaml | grep version | cut -d ':' -f 2 | tr -d ' "')

          CHANGELOG=$(awk '/changeLog: \|/{flag=1;next}/^[^ ]/{flag=0}flag' version.yaml | sed ':a;N;$!ba;s/\n/ <br\/> /g')
          
          echo "Current version: $ONLINE_VERSION"

          echo "Current CHANGELOG: $CHANGELOG"
          

      - name: Compare Versions
        id: compare_versions
        run: |
          current_timestamp=$(date +%s%N | cut -b1-13)
          echo "当前时间戳 $current_timestamp"
          curl -sL "https://qn.whyour.cn/version.yaml?t=$current_timestamp" -o latest.yaml

          ONLINE_VERSION=$(cat latest.yaml | grep version | cut -d ':' -f 2 | tr -d ' "')

          CHANGELOG=$(awk '/changeLog: \|/{flag=1;next}/^[^ ]/{flag=0}flag' version.yaml | sed ':a;N;$!ba;s/\n/ <br\/> /g')
          
          CACHED_VERSION=$(cat .version)
          
          echo "ONLINE_VERSION=$ONLINE_VERSION" >>$GITHUB_OUTPUT

          echo "CHANGELOG=$CHANGELOG" >>$GITHUB_OUTPUT

          echo "FOR TEST ${{ steps.compare_versions.outputs.ONLINE_VERSION }}"

          echo "Cached version: $CACHED_VERSION"
          echo "Current version: $ONLINE_VERSION"

          if [ "$CACHED_VERSION" != "$ONLINE_VERSION" ]; then
            echo "New version found: $ONLINE_VERSION"
            echo "NEW_VERSION_FOUND=true" >> $GITHUB_OUTPUT
          else
            echo "No new version found."
            echo "NEW_VERSION_FOUND=false" >> $GITHUB_OUTPUT
          fi

      - name: Setting Docker Buildx
        if: ${{ steps.compare_versions.outputs.NEW_VERSION_FOUND == 'true' }}
        uses: docker/setup-buildx-action@v2

      - name: Pull Docker Image
        if: ${{ steps.compare_versions.outputs.NEW_VERSION_FOUND == 'true' }}
        run: |
          docker pull whyour/qinglong:debian
          docker pull whyour/qinglong:latest

      - name: Run Docker Container
        if: ${{ steps.compare_versions.outputs.NEW_VERSION_FOUND == 'true' }}
        run: |
          docker run --name qinglong-debian -dit -p 5700:5700 whyour/qinglong:debian
          docker run --name qinglong-latest -dit -p 5701:5700 whyour/qinglong:latest

      - name: Check Container Api Status
        if: ${{ steps.compare_versions.outputs.NEW_VERSION_FOUND == 'true' }}
        run: |
          while ! curl -s -w "%{http_code}" http://127.0.0.1:5700/api/public/health | grep -q 200; do sleep 1; done
          while ! curl -s -w "%{http_code}" http://127.0.0.1:5701/api/public/health | grep -q 200; do sleep 1; done

      - name: Execute Multiple Commands In Debian Container
        if: ${{ steps.compare_versions.outputs.NEW_VERSION_FOUND == 'true' }}
        run: |
          docker exec qinglong-debian bash -c "pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple"
          docker exec qinglong-debian bash -c "printf 'deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye main contrib non-free\n' >/etc/apt/sources.list"
          docker exec qinglong-debian bash -c "printf 'deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-updates main contrib non-free\n' >>/etc/apt/sources.list"
          docker exec qinglong-debian bash -c "printf 'deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-backports main contrib non-free\n' >>/etc/apt/sources.list"

      - name: Execute Multiple Commands In Latest Container
        if: ${{ steps.compare_versions.outputs.NEW_VERSION_FOUND == 'true' }}
        run: |
          docker exec qinglong-latest bash -c "pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple"
          docker exec qinglong-latest bash -c "sed -i 's/dl-cdn.alpinelinux.org/mirrors.tuna.tsinghua.edu.cn/g' /etc/apk/repositories"

      - name: Stop Container
        if: ${{ steps.compare_versions.outputs.NEW_VERSION_FOUND == 'true' }}
        run: |
          docker stop qinglong-debian
          docker stop qinglong-latest

      - name: Commit Docker Container
        if: ${{ steps.compare_versions.outputs.NEW_VERSION_FOUND == 'true' }}
        run: |
          docker commit qinglong-debian qinglong-debian
          docker commit qinglong-latest qinglong-latest

      - name: Export Docker Image
        if: ${{ steps.compare_versions.outputs.NEW_VERSION_FOUND == 'true' }}
        run: |
          docker export -o qinglong-debian.tar qinglong-debian
          docker export -o qinglong-latest.tar qinglong-latest

      - name: Compress Files And List File Sizes
        if: ${{ steps.compare_versions.outputs.NEW_VERSION_FOUND == 'true' }}
        run: |
          # Compress qinglong-debian.tar in gzip format
          gzip -c qinglong-debian.tar > qinglong-debian.tar.gz
          # Compress qinglong-debian.tar in bzip2 format
          bzip2 -c qinglong-debian.tar > qinglong-debian.tar.bz2
          # Compress qinglong-debian.tar in xz format
          xz -c qinglong-debian.tar > qinglong-debian.tar.xz

          # Compress qinglong-latest.tar in gzip format
          gzip -c qinglong-latest.tar > qinglong-latest.tar.gz
          # Compress qinglong-latest.tar in bzip2 format
          bzip2 -c qinglong-latest.tar > qinglong-latest.tar.bz2
          # Compress qinglong-latest.tar in xz format
          xz -c qinglong-latest.tar > qinglong-latest.tar.xz

          # List file sizes before and after compression
          echo "qinglong-debian.tar size:"
          ls -lh qinglong-debian.tar
          echo "qinglong-debian.tar.gz size:"
          ls -lh qinglong-debian.tar.gz
          echo "qinglong-debian.tar.bz2 size:"
          ls -lh qinglong-debian.tar.bz2
          echo "qinglong-debian.tar.xz size:"
          ls -lh qinglong-debian.tar.xz

          echo "qinglong-latest.tar size:"
          ls -lh qinglong-latest.tar
          echo "qinglong-latest.tar.gz size:"
          ls -lh qinglong-latest.tar.gz
          echo "qinglong-latest.tar.bz2 size:"
          ls -lh qinglong-latest.tar.bz2
          echo "qinglong-latest.tar.xz size:"
          ls -lh qinglong-latest.tar.xz

      - name: Create Release
        if: ${{ steps.compare_versions.outputs.NEW_VERSION_FOUND == 'true' }}
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.compare_versions.outputs.ONLINE_VERSION }}
          name: Releases ${{ steps.compare_versions.outputs.ONLINE_VERSION }}
          body: |
            Update to Version ${{ steps.compare_versions.outputs.ONLINE_VERSION }}
            CHANGELOG: 
              ${{ steps.compare_versions.outputs.CHANGELOG }}
          draft: false
          prerelease: false
          files: |
            qinglong-debian.tar
            qinglong-debian.tar.gz
            qinglong-debian.tar.bz2
            qinglong-debian.tar.xz
            qinglong-latest.tar
            qinglong-latest.tar.gz
            qinglong-latest.tar.bz2
            qinglong-latest.tar.xz

      - name: Save Version In Cache
        if: ${{ steps.compare_versions.outputs.NEW_VERSION_FOUND == 'true' }}
        uses: actions/cache@v4
        with:
          path: .version
          key: CACHE-VERSION
          restore-keys: CACHE-VERSION

      - name: WRITE VERSION TO FILE
        if: ${{ steps.compare_versions.outputs.NEW_VERSION_FOUND == 'true' }}
        run: echo ${{ steps.compare_versions.outputs.ONLINE_VERSION }} > .version
